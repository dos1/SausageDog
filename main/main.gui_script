local save_file = sys.get_save_file("my_game", "gamedata")

function init(self)
	self.score = -1
	self.score_node = gui.get_node("score")
	self.lifes = -1
	self.lifes_node = gui.get_node("lifes")
	self.highscore = -1
	self.highscore_node = gui.get_node("highscore1")
	print(sys.load(save_file)[1] == nil)
	if sys.load(save_file)[1] == nil then
		self.highscore = 0
	else
		self.highscore = sys.load(save_file)[1]
	end
	gui.set_text(self.highscore_node, tostring(self.highscore))
	gui.set_enabled(gui.get_node("box"), false)
end

local function scale_down(self, node)
	local s = 1.0
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.05)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_score") then
		local s = 1.2
		self.score = message[1]
		gui.set_text(self.score_node, tostring(self.score))
		gui.animate(self.score_node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.1, 0.0, scale_down)
	end
	if message_id == hash("update_lifes") then
		local s = 1.2
		self.lifes = message[1]
		gui.set_text(self.lifes_node, tostring(self.lifes))
		gui.animate(self.lifes_node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.1, 0.0, scale_down)
	end
	if message_id == hash("update_highscore") then
		self.highscore = message[1]
		gui.set_text(self.highscore_node, tostring(self.highscore))
		gui.animate(self.highscore_node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.1, 0.0, scale_down)
	end
	if message_id == hash("enable") then
		gui.set_enabled(gui.get_node("box"), true)
	end
	if message_id == hash("disable") then
		gui.set_enabled(gui.get_node("box"), false)
	end
	
end
